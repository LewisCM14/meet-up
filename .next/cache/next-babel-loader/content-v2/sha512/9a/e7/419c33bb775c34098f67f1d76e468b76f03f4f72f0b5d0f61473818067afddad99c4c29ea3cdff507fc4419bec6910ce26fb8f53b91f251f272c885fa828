{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lewis\\\\Documents\\\\React\\\\nextjs\\\\meetup\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  // passes the required props to the MeetupDetails component\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n} // informs getStaticProps for which items of [meetupId] to generate a page for\n// indicates all supported paths have been defined, a path not declared returns 404\n\n\nexport async function getStaticPaths() {\n  // uses the connect method with user details to reach out to my cluster\n  const client = await MongoClient.connect(\"mongodb+srv://LewisMartin:ZvugwAgALap1JEuR@cluster0.b9flzdy.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db(); // connect to the database\n\n  const meetupsCollection = db.collection(\"meetups\"); // drills down into the meetups collection of the meetups database\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // collect the id value for each document in the collection\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} // accepts context to allow access to id in dynamic URL\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId; // uses the connect method with user details to reach out to my cluster\n\n  const client = await MongoClient.connect(\"mongodb+srv://LewisMartin:ZvugwAgALap1JEuR@cluster0.b9flzdy.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db(); // connect to the database\n\n  const meetupsCollection = db.collection(\"meetups\"); // drills down into the meetups collection of the meetups database\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    // matches the id passed in the URL to the meetup in the database\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/Lewis/Documents/React/nextjs/meetup/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","ObjectId","console","log","id"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B;AAEA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,6GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CALqC,CAKb;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAPqC,CAOe;;AAEpD,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CATqC,CASmC;;AAExER,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAH4C,CAK5C;;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,6GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAT4C,CASpB;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAX4C,CAWQ;;AAEpD,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAE;AACvDb,IAAAA,GAAG,EAAEc,QAAQ,CAACN,QAAD;AADwC,GAA1B,CAA7B;AAGAf,EAAAA,MAAM,CAACS,KAAP;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV8B,QAAAA,EAAE,EAAEL,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHd;AAIVF,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAJZ;AAKVG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n  // passes the required props to the MeetupDetails component\r\n\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\n// informs getStaticProps for which items of [meetupId] to generate a page for\r\n// indicates all supported paths have been defined, a path not declared returns 404\r\nexport async function getStaticPaths() {\r\n  // uses the connect method with user details to reach out to my cluster\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://LewisMartin:ZvugwAgALap1JEuR@cluster0.b9flzdy.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db(); // connect to the database\r\n\r\n  const meetupsCollection = db.collection(\"meetups\"); // drills down into the meetups collection of the meetups database\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); // collect the id value for each document in the collection\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\n// accepts context to allow access to id in dynamic URL\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single meetup\r\n\r\n  const meetupId = context.params.meetupId;\r\n\r\n  // uses the connect method with user details to reach out to my cluster\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://LewisMartin:ZvugwAgALap1JEuR@cluster0.b9flzdy.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db(); // connect to the database\r\n\r\n  const meetupsCollection = db.collection(\"meetups\"); // drills down into the meetups collection of the meetups database\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({ // matches the id passed in the URL to the meetup in the database\r\n    _id: ObjectId(meetupId),\r\n  }); \r\n  client.close();\r\n\r\n  console.log(meetupId);\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}